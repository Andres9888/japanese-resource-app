/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ConnectStripeInput: { // input type
    code: string; // String!
  }
  LogInInput: { // input type
    code: string; // String!
  }
  resourceInput: { // input type
    resource: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  ConfirmStatus: { // root type
    status: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  Resource: { // root type
    count?: number | null; // Int
    description?: string | null; // String
    id?: string | null; // ID
    image?: string | null; // String
    tags: NexusGenRootTypes['Tags'][]; // [Tags!]!
    title?: string | null; // String
    url?: string | null; // String
  }
  ResourceId: { // root type
    id?: number | null; // Int
    resourceId?: string | null; // String
    userId?: string | null; // String
  }
  Tags: { // root type
    id?: number | null; // Int
    name?: string | null; // String
    resourceId?: string | null; // String
  }
  UserResources: { // root type
    resources: NexusGenRootTypes['ResourceId'][]; // [ResourceId!]!
  }
  Viewer: { // root type
    avatar?: string | null; // String
    didRequest: boolean; // Boolean!
    hasWallet?: boolean | null; // Boolean
    id?: string | null; // ID
    isCommited?: boolean | null; // Boolean
    name?: string | null; // String
    token?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  ConfirmStatus: { // field return type
    status: boolean; // Boolean!
  }
  Mutation: { // field return type
    increment: NexusGenRootTypes['ConfirmStatus']; // ConfirmStatus!
    logIn: NexusGenRootTypes['Viewer']; // Viewer!
    logOut: NexusGenRootTypes['Viewer']; // Viewer!
    setCommitment: NexusGenRootTypes['Viewer']; // Viewer!
    setCommitmentLog: NexusGenRootTypes['ConfirmStatus']; // ConfirmStatus!
    setStripeCardStatus: NexusGenRootTypes['Viewer']; // Viewer!
  }
  Query: { // field return type
    authUrl: string; // String!
    getUserResourceIds: NexusGenRootTypes['UserResources'][]; // [UserResources!]!
    resources: NexusGenRootTypes['Resource'][]; // [Resource!]!
  }
  Resource: { // field return type
    count: number | null; // Int
    description: string | null; // String
    id: string | null; // ID
    image: string | null; // String
    tags: NexusGenRootTypes['Tags'][]; // [Tags!]!
    title: string | null; // String
    url: string | null; // String
  }
  ResourceId: { // field return type
    id: number | null; // Int
    resourceId: string | null; // String
    userId: string | null; // String
  }
  Tags: { // field return type
    id: number | null; // Int
    name: string | null; // String
    resourceId: string | null; // String
  }
  UserResources: { // field return type
    resources: NexusGenRootTypes['ResourceId'][]; // [ResourceId!]!
  }
  Viewer: { // field return type
    avatar: string | null; // String
    didRequest: boolean; // Boolean!
    hasWallet: boolean | null; // Boolean
    id: string | null; // ID
    isCommited: boolean | null; // Boolean
    name: string | null; // String
    token: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  ConfirmStatus: { // field return type name
    status: 'Boolean'
  }
  Mutation: { // field return type name
    increment: 'ConfirmStatus'
    logIn: 'Viewer'
    logOut: 'Viewer'
    setCommitment: 'Viewer'
    setCommitmentLog: 'ConfirmStatus'
    setStripeCardStatus: 'Viewer'
  }
  Query: { // field return type name
    authUrl: 'String'
    getUserResourceIds: 'UserResources'
    resources: 'Resource'
  }
  Resource: { // field return type name
    count: 'Int'
    description: 'String'
    id: 'ID'
    image: 'String'
    tags: 'Tags'
    title: 'String'
    url: 'String'
  }
  ResourceId: { // field return type name
    id: 'Int'
    resourceId: 'String'
    userId: 'String'
  }
  Tags: { // field return type name
    id: 'Int'
    name: 'String'
    resourceId: 'String'
  }
  UserResources: { // field return type name
    resources: 'ResourceId'
  }
  Viewer: { // field return type name
    avatar: 'String'
    didRequest: 'Boolean'
    hasWallet: 'Boolean'
    id: 'ID'
    isCommited: 'Boolean'
    name: 'String'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    increment: { // args
      id: string; // ID!
      resource: string; // String!
      viewer: string; // ID!
    }
    logIn: { // args
      input?: NexusGenInputs['LogInInput'] | null; // LogInInput
    }
    setCommitment: { // args
      isCommited: boolean; // Boolean!
      timeZone: string; // String!
      viewerId: string; // ID!
    }
    setCommitmentLog: { // args
      viewerId: string; // ID!
    }
    setStripeCardStatus: { // args
      viewerId: string; // ID!
    }
  }
  Query: {
    getUserResourceIds: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}